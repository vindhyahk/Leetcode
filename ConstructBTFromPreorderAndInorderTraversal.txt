# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def buildTree(self, preorder: List[int], inorder: List[int]) -> Optional[TreeNode]:

        if not inorder or not preorder:
            return None

        root=TreeNode(preorder[0])    #root is always first element of preorder
        mid=inorder.index(preorder[0])  #find where root is in inorder exp so that you can split it 

        #splitting for left and right subparts and recursively calling
        root.left= self.buildTree( preorder[1:mid+1], inorder[:mid])
        root.right= self.buildTree( preorder[mid+1:], inorder[mid+1:])
        return root